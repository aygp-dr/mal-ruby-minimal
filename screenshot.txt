╔═══════════════════════════════════════════════════════════════════╗
║                    MAL - Make a Lisp (Ruby Minimal)               ║
║                                                                   ║
║  A pedagogical Lisp interpreter built with only cons cells        ║
║  No arrays, no hashes, no blocks - just pairs all the way down   ║
║                                                                   ║
║  Type expressions at the prompt. Some examples:                  ║
║    (+ 1 2 3)                    ; => 6                           ║
║    (def! factorial              ; Define recursive factorial     ║
║      (fn* (n)                                                    ║
║        (if (< n 2)                                               ║
║          1                                                       ║
║          (* n (factorial (- n 1))))))                            ║
║    (factorial 5)                ; => 120                         ║
║                                                                   ║
║  Special forms: def! let* if fn* do quote                       ║
║  Built-ins: + - * / = < > <= >= list list? empty? count not     ║
║                                                                   ║
║  Press Ctrl-D to exit                                            ║
╚═══════════════════════════════════════════════════════════════════╝

> (def fact (fn (n) (if (= n 0) 1 (* n (fact (- n 1))))))
=> #<function>
> (fact 5)
=> 120
> (fact 10)
=> 3628800
> 