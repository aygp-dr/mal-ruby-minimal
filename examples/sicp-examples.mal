;; SICP-inspired examples
;; Classic functional programming patterns

;; Square function
(def! square (fn* (x) (* x x)))
(square 5)
;; => 25

;; Sum of squares
(def! sum-of-squares 
  (fn* (x y) 
    (+ (square x) (square y))))
(sum-of-squares 3 4)
;; => 25

;; Absolute value
(def! abs
  (fn* (x)
    (if (< x 0)
      (- 0 x)
      x)))
(abs -5)
;; => 5
(abs 5)
;; => 5

;; Good-enough? for square root
(def! good-enough?
  (fn* (guess x)
    (< (abs (- (square guess) x)) 0.001)))

;; Average
(def! average
  (fn* (x y)
    (/ (+ x y) 2)))

;; Improve guess for square root
(def! improve
  (fn* (guess x)
    (average guess (/ x guess))))

;; Note: Full Newton's method would need TCO (step 5)