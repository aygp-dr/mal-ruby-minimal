;; SICP 1.1.6 - Conditional Expressions

(def! abs (fn* [x]
  (cond (> x 0) x
        (= x 0) 0
        (< x 0) (- x))))

;; Alternative definition using if
(def! abs2 (fn* [x]
  (if (< x 0)
      (- x)
      x)))

;; Exercise 1.3: Sum of squares of two larger numbers
(def! sum-squares-larger (fn* [x y z]
  (cond (and (<= x y) (<= x z)) (sum-of-squares y z)
        (and (<= y x) (<= y z)) (sum-of-squares x z)
        :else (sum-of-squares x y))))

;; Exercise 1.4: Compound expression with operator as result
(def! a-plus-abs-b (fn* [a b]
  ((if (> b 0) + -) a b)))

;; Test predicates
(def! positive? (fn* [x] (> x 0)))
(def! negative? (fn* [x] (< x 0)))
(def! zero? (fn* [x] (= x 0)))
