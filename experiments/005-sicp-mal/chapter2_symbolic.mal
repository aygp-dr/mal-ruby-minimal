;; SICP 2.3.2 - Symbolic Differentiation

;; Representation of algebraic expressions
(def! variable? (fn* [x] (symbol? x)))

(def! same-variable? (fn* [v1 v2]
  (and (variable? v1) (variable? v2) (= v1 v2))))

(def! make-sum (fn* [a1 a2]
  (cond (=number? a1 0) a2
        (=number? a2 0) a1
        (and (number? a1) (number? a2)) (+ a1 a2)
        :else (list '+ a1 a2))))

(def! make-product (fn* [m1 m2]
  (cond (or (=number? m1 0) (=number? m2 0)) 0
        (=number? m1 1) m2
        (=number? m2 1) m1
        (and (number? m1) (number? m2)) (* m1 m2)
        :else (list '* m1 m2))))

(def! =number? (fn* [exp num]
  (and (number? exp) (= exp num))))

(def! sum? (fn* [x]
  (and (list? x) (= (first x) '+))))

(def! addend (fn* [s] (nth s 1)))
(def! augend (fn* [s] (nth s 2)))

(def! product? (fn* [x]
  (and (list? x) (= (first x) '*))))

(def! multiplier (fn* [p] (nth p 1)))
(def! multiplicand (fn* [p] (nth p 2)))

;; The differentiator
(def! deriv (fn* [exp var]
  (cond (number? exp) 0
        (variable? exp)
          (if (same-variable? exp var) 1 0)
        (sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var))
        (product? exp)
          (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var)
                          (multiplicand exp)))
        :else
          (throw "unknown expression type -- DERIV"))))

;; Exercise 2.56 - Exponentiation
(def! exponentiation? (fn* [x]
  (and (list? x) (= (first x) '**))))

(def! base (fn* [e] (nth e 1)))
(def! exponent (fn* [e] (nth e 2)))

(def! make-exponentiation (fn* [base exp]
  (cond (=number? exp 0) 1
        (=number? exp 1) base
        (and (number? base) (number? exp)) (expt base exp)
        :else (list '** base exp))))

;; Extended deriv with exponentiation
(def! deriv-extended (fn* [exp var]
  (cond (number? exp) 0
        (variable? exp)
          (if (same-variable? exp var) 1 0)
        (sum? exp)
          (make-sum (deriv-extended (addend exp) var)
                    (deriv-extended (augend exp) var))
        (product? exp)
          (make-sum
            (make-product (multiplier exp)
                          (deriv-extended (multiplicand exp) var))
            (make-product (deriv-extended (multiplier exp) var)
                          (multiplicand exp)))
        (exponentiation? exp)
          (make-product
            (make-product (exponent exp)
                          (make-exponentiation (base exp)
                                               (make-sum (exponent exp) -1)))
            (deriv-extended (base exp) var))
        :else
          (throw "unknown expression type -- DERIV"))))

;; Test expressions
(def! test-deriv (fn* []
  (println "Derivative tests:")
  (println (str "  d/dx(x + 3) = " (deriv '(+ x 3) 'x)))
  (println (str "  d/dx(x * y) = " (deriv '(* x y) 'x)))
  (println (str "  d/dx(x * y + x + 3) = " 
                (deriv '(+ (* x y) (+ x 3)) 'x)))))
