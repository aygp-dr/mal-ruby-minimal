;; SICP 1.3.3 & 1.3.4 - Procedures as Return Values

;; Average damping
(def! average (fn* [x y] (/ (+ x y) 2)))

(def! average-damp (fn* [f]
  (fn* [x] (average x (f x)))))

;; Fixed point
(def! tolerance 0.00001)

(def! fixed-point (fn* [f first-guess]
  (let* [close-enough? (fn* [v1 v2]
                         (< (abs (- v1 v2)) tolerance))
         try (fn* [guess]
               (let* [next (f guess)]
                 (if (close-enough? guess next)
                     next
                     (try next))))]
    (try first-guess))))

;; Square root using fixed point
(def! sqrt-fixed-point (fn* [x]
  (fixed-point (average-damp (fn* [y] (/ x y)))
               1.0)))

;; Newton's method
(def! deriv (fn* [g]
  (let* [dx 0.00001]
    (fn* [x]
      (/ (- (g (+ x dx)) (g x))
         dx)))))

(def! newton-transform (fn* [g]
  (fn* [x]
    (- x (/ (g x) ((deriv g) x))))))

(def! newtons-method (fn* [g guess]
  (fixed-point (newton-transform g) guess)))

(def! sqrt-newton (fn* [x]
  (newtons-method (fn* [y] (- (square y) x))
                   1.0)))

;; Fixed point of transforms
(def! fixed-point-of-transform (fn* [g transform guess]
  (fixed-point (transform g) guess)))

;; Exercise 1.40
(def! cubic (fn* [a b c]
  (fn* [x]
    (+ (cube x)
       (* a (square x))
       (* b x)
       c))))

;; Exercise 1.41 - Double
(def! double (fn* [f]
  (fn* [x] (f (f x)))))

;; ((double (double double)) inc) 0) => 16

;; Exercise 1.42 - Compose
(def! compose (fn* [f g]
  (fn* [x] (f (g x)))))

;; Exercise 1.43 - Repeated
(def! repeated (fn* [f n]
  (if (= n 1)
      f
      (compose f (repeated f (- n 1))))))
