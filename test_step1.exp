#!/usr/bin/expect -f

# Test script for step1_read_print.rb
# Using expect for integration testing as suggested

set timeout 2

spawn ./step1_read_print.rb

# Test basic numbers
expect "user> "
send "123\r"
expect "123"

# Test negative numbers
expect "user> "
send -- "-456\r"
expect -- "-456"

# Test symbols
expect "user> "
send "abc\r"
expect "abc"

# Test simple list
expect "user> "
send "(+ 1 2)\r"
expect "(+ 1 2)"

# Test nested list
expect "user> "
send "(+ 1 (* 2 3))\r"
expect "(+ 1 (* 2 3))"

# Test empty list
expect "user> "
send "()\r"
expect "()"

# Test vector
expect "user> "
send "\[1 2 3\]\r"
expect "\[1 2 3\]"

# Test hash-map
expect "user> "
send "{:a 1 :b 2}\r"
expect "{:a 1 :b 2}"

# Test string
expect "user> "
send "\"hello world\"\r"
expect "\"hello world\""

# Test string with escapes
expect "user> "
send "\"hello\\nworld\"\r"
expect "\"hello\\nworld\""

# Test nil, true, false
expect "user> "
send "nil\r"
expect "nil"

expect "user> "
send "true\r"
expect "true"

expect "user> "
send "false\r"
expect "false"

# Test quote reader macro
expect "user> "
send "'(1 2 3)\r"
expect "(quote (1 2 3))"

# Test quasiquote
expect "user> "
send "`(1 2 3)\r"
expect "(quasiquote (1 2 3))"

# Test unquote
expect "user> "
send "~x\r"
expect "(unquote x)"

# Test error handling
expect "user> "
send "(1 2\r"
expect "Error: Expected ')'"

# Exit
send "\004"
expect eof

puts "\nAll tests passed!"